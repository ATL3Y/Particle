// Render texture version.
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Structured Buffer version.
#pragma kernel Multiply

// Create a RenderTexture with enableRandomWrite flag and set it with cs.SetTexture
RWTexture2D<float4> Result;

float _SinTime;

struct VecMatPair {
	float3 pos;
	float4x4 mat;
};

RWStructuredBuffer<VecMatPair> dataBuffer;

[numthreads(16,1,1)]
void Multiply(uint3 id : SV_DispatchThreadID) {

	float val = (_SinTime + 1) * .5;
	val = fmod(val, 1);
	float3 newPos = val * dataBuffer[id.x].pos;

	dataBuffer[id.x].pos = mul(dataBuffer[id.x].mat,
		float4(newPos, 1.0));
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float val = (_SinTime + 1) * .5;
	val += id.x * .05;
	val = fmod(val, 1);
	Result[id.xy] = float4(val, val, val, 1.0);
}
